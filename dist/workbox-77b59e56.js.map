{"version":3,"file":"workbox-77b59e56.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/Router.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/dontWaitFor.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/idb/build/wrap-idb-value.js","node_modules/idb/build/index.js","node_modules/workbox-expiration/_version.js","node_modules/workbox-expiration/models/CacheTimestampsModel.js","node_modules/workbox-expiration/CacheExpiration.js","node_modules/workbox-cacheable-response/_version.js","node_modules/workbox-cacheable-response/CacheableResponse.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-core/_private/waitUntil.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/PrecacheStrategy.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/PrecacheRoute.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-strategies/CacheFirst.js","node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","node_modules/workbox-expiration/ExpirationPlugin.js","node_modules/workbox-core/registerQuotaErrorCallback.js","node_modules/workbox-routing/NavigationRoute.js","node_modules/workbox-strategies/NetworkFirst.js","node_modules/workbox-precaching/cleanupOutdatedCaches.js","node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","node_modules/workbox-core/clientsClaim.js","node_modules/workbox-precaching/createHandlerBoundToURL.js","node_modules/workbox-precaching/precacheAndRoute.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/addRoute.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst logger = (process.env.NODE_ENV === 'production'\r\n    ? null\r\n    : (() => {\r\n        // Don't overwrite this value if it's already set.\r\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\r\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\r\n            self.__WB_DISABLE_DEV_LOGS = false;\r\n        }\r\n        let inGroup = false;\r\n        const methodToColorMap = {\r\n            debug: `#7f8c8d`,\r\n            log: `#2ecc71`,\r\n            warn: `#f39c12`,\r\n            error: `#c0392b`,\r\n            groupCollapsed: `#3498db`,\r\n            groupEnd: null, // No colored prefix on groupEnd\r\n        };\r\n        const print = function (method, args) {\r\n            if (self.__WB_DISABLE_DEV_LOGS) {\r\n                return;\r\n            }\r\n            if (method === 'groupCollapsed') {\r\n                // Safari doesn't print all console.groupCollapsed() arguments:\r\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\r\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\r\n                    console[method](...args);\r\n                    return;\r\n                }\r\n            }\r\n            const styles = [\r\n                `background: ${methodToColorMap[method]}`,\r\n                `border-radius: 0.5em`,\r\n                `color: white`,\r\n                `font-weight: bold`,\r\n                `padding: 2px 0.5em`,\r\n            ];\r\n            // When in a group, the workbox prefix is not displayed.\r\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\r\n            console[method](...logPrefix, ...args);\r\n            if (method === 'groupCollapsed') {\r\n                inGroup = true;\r\n            }\r\n            if (method === 'groupEnd') {\r\n                inGroup = false;\r\n            }\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/ban-types\r\n        const api = {};\r\n        const loggerMethods = Object.keys(methodToColorMap);\r\n        for (const key of loggerMethods) {\r\n            const method = key;\r\n            api[method] = (...args) => {\r\n                print(method, args);\r\n            };\r\n        }\r\n        return api;\r\n    })());\r\nexport { logger };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        const message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:routing:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The default HTTP method, 'GET', used when there's no specific method\r\n * configured for a route.\r\n *\r\n * @type {string}\r\n *\r\n * @private\r\n */\r\nexport const defaultMethod = 'GET';\r\n/**\r\n * The list of valid HTTP methods associated with requests that could be routed.\r\n *\r\n * @type {Array<string>}\r\n *\r\n * @private\r\n */\r\nexport const validMethods = [\r\n    'DELETE',\r\n    'GET',\r\n    'HEAD',\r\n    'PATCH',\r\n    'POST',\r\n    'PUT',\r\n];\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport '../_version.js';\r\n/**\r\n * @param {function()|Object} handler Either a function, or an object with a\r\n * 'handle' method.\r\n * @return {Object} An object with a handle method.\r\n *\r\n * @private\r\n */\r\nexport const normalizeHandler = (handler) => {\r\n    if (handler && typeof handler === 'object') {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.hasMethod(handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return handler;\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(handler, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return { handle: handler };\r\n    }\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { defaultMethod, validMethods } from './utils/constants.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\r\n * The \"match\" callback determine if a route should be used to \"handle\" a\r\n * request by returning a non-falsy value if it can. The \"handler\" callback\r\n * is called when there is a match and should return a Promise that resolves\r\n * to a `Response`.\r\n *\r\n * @memberof workbox-routing\r\n */\r\nclass Route {\r\n    /**\r\n     * Constructor for Route class.\r\n     *\r\n     * @param {workbox-routing~matchCallback} match\r\n     * A callback function that determines whether the route matches a given\r\n     * `fetch` event by returning a non-falsy value.\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resolving to a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(match, handler, method = defaultMethod) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(match, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'match',\r\n            });\r\n            if (method) {\r\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\r\n            }\r\n        }\r\n        // These values are referenced directly by Router so cannot be\r\n        // altered by minificaton.\r\n        this.handler = normalizeHandler(handler);\r\n        this.match = match;\r\n        this.method = method;\r\n    }\r\n    /**\r\n     *\r\n     * @param {workbox-routing-handlerCallback} handler A callback\r\n     * function that returns a Promise resolving to a Response\r\n     */\r\n    setCatchHandler(handler) {\r\n        this.catchHandler = normalizeHandler(handler);\r\n    }\r\n}\r\nexport { Route };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * {@link workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\r\nclass RegExpRoute extends Route {\r\n    /**\r\n     * If the regular expression contains\r\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n     * the captured values will be passed to the\r\n     * {@link workbox-routing~handlerCallback} `params`\r\n     * argument.\r\n     *\r\n     * @param {RegExp} regExp The regular expression to match against URLs.\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(regExp, handler, method) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(regExp, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'RegExpRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'pattern',\r\n            });\r\n        }\r\n        const match = ({ url }) => {\r\n            const result = regExp.exec(url.href);\r\n            // Return immediately if there's no match.\r\n            if (!result) {\r\n                return;\r\n            }\r\n            // Require that the match start at the first character in the URL string\r\n            // if it's a cross-origin request.\r\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\r\n            // behind this behavior.\r\n            if (url.origin !== location.origin && result.index !== 0) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\r\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\r\n                        `handle cross-origin requests if they match the entire URL.`);\r\n                }\r\n                return;\r\n            }\r\n            // If the route matches, but there aren't any capture groups defined, then\r\n            // this will return [], which is truthy and therefore sufficient to\r\n            // indicate a match.\r\n            // If there are capture groups, then it will return their values.\r\n            return result.slice(1);\r\n        };\r\n        super(match, handler, method);\r\n    }\r\n}\r\nexport { RegExpRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { defaultMethod } from './utils/constants.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * The Router can be used to process a `FetchEvent` using one or more\r\n * {@link workbox-routing.Route}, responding with a `Response` if\r\n * a matching route exists.\r\n *\r\n * If no route matches a given a request, the Router will use a \"default\"\r\n * handler if one is defined.\r\n *\r\n * Should the matching Route throw an error, the Router will use a \"catch\"\r\n * handler if one is defined to gracefully deal with issues and respond with a\r\n * Request.\r\n *\r\n * If a request matches multiple routes, the **earliest** registered route will\r\n * be used to respond to the request.\r\n *\r\n * @memberof workbox-routing\r\n */\r\nclass Router {\r\n    /**\r\n     * Initializes a new Router.\r\n     */\r\n    constructor() {\r\n        this._routes = new Map();\r\n        this._defaultHandlerMap = new Map();\r\n    }\r\n    /**\r\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\r\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\r\n     * instances that are registered.\r\n     */\r\n    get routes() {\r\n        return this._routes;\r\n    }\r\n    /**\r\n     * Adds a fetch event listener to respond to events when a route matches\r\n     * the event's request.\r\n     */\r\n    addFetchListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('fetch', ((event) => {\r\n            const { request } = event;\r\n            const responsePromise = this.handleRequest({ request, event });\r\n            if (responsePromise) {\r\n                event.respondWith(responsePromise);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Adds a message event listener for URLs to cache from the window.\r\n     * This is useful to cache resources loaded on the page prior to when the\r\n     * service worker started controlling it.\r\n     *\r\n     * The format of the message data sent from the window should be as follows.\r\n     * Where the `urlsToCache` array may consist of URL strings or an array of\r\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\r\n     *\r\n     * ```\r\n     * {\r\n     *   type: 'CACHE_URLS',\r\n     *   payload: {\r\n     *     urlsToCache: [\r\n     *       './script1.js',\r\n     *       './script2.js',\r\n     *       ['./script3.js', {mode: 'no-cors'}],\r\n     *     ],\r\n     *   },\r\n     * }\r\n     * ```\r\n     */\r\n    addCacheListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('message', ((event) => {\r\n            // event.data is type 'any'\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n            if (event.data && event.data.type === 'CACHE_URLS') {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                const { payload } = event.data;\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\r\n                }\r\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\r\n                    if (typeof entry === 'string') {\r\n                        entry = [entry];\r\n                    }\r\n                    const request = new Request(...entry);\r\n                    return this.handleRequest({ request, event });\r\n                    // TODO(philipwalton): TypeScript errors without this typecast for\r\n                    // some reason (probably a bug). The real type here should work but\r\n                    // doesn't: `Array<Promise<Response> | undefined>`.\r\n                })); // TypeScript\r\n                event.waitUntil(requestPromises);\r\n                // If a MessageChannel was used, reply to the message on success.\r\n                if (event.ports && event.ports[0]) {\r\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Apply the routing rules to a FetchEvent object to get a Response from an\r\n     * appropriate Route's handler.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request} options.request The request to handle.\r\n     * @param {ExtendableEvent} options.event The event that triggered the\r\n     *     request.\r\n     * @return {Promise<Response>|undefined} A promise is returned if a\r\n     *     registered route can handle the request. If there is no matching\r\n     *     route and there's no `defaultHandler`, `undefined` is returned.\r\n     */\r\n    handleRequest({ request, event, }) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'handleRequest',\r\n                paramName: 'options.request',\r\n            });\r\n        }\r\n        const url = new URL(request.url, location.href);\r\n        if (!url.protocol.startsWith('http')) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\r\n            }\r\n            return;\r\n        }\r\n        const sameOrigin = url.origin === location.origin;\r\n        const { params, route } = this.findMatchingRoute({\r\n            event,\r\n            request,\r\n            sameOrigin,\r\n            url,\r\n        });\r\n        let handler = route && route.handler;\r\n        const debugMessages = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (handler) {\r\n                debugMessages.push([`Found a route to handle this request:`, route]);\r\n                if (params) {\r\n                    debugMessages.push([\r\n                        `Passing the following params to the route's handler:`,\r\n                        params,\r\n                    ]);\r\n                }\r\n            }\r\n        }\r\n        // If we don't have a handler because there was no matching route, then\r\n        // fall back to defaultHandler if that's defined.\r\n        const method = request.method;\r\n        if (!handler && this._defaultHandlerMap.has(method)) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                debugMessages.push(`Failed to find a matching route. Falling ` +\r\n                    `back to the default handler for ${method}.`);\r\n            }\r\n            handler = this._defaultHandlerMap.get(method);\r\n        }\r\n        if (!handler) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                // No handler so Workbox will do nothing. If logs is set of debug\r\n                // i.e. verbose, we should print out this information.\r\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\r\n            }\r\n            return;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            // We have a handler, meaning Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\r\n            debugMessages.forEach((msg) => {\r\n                if (Array.isArray(msg)) {\r\n                    logger.log(...msg);\r\n                }\r\n                else {\r\n                    logger.log(msg);\r\n                }\r\n            });\r\n            logger.groupEnd();\r\n        }\r\n        // Wrap in try and catch in case the handle method throws a synchronous\r\n        // error. It should still callback to the catch handler.\r\n        let responsePromise;\r\n        try {\r\n            responsePromise = handler.handle({ url, request, event, params });\r\n        }\r\n        catch (err) {\r\n            responsePromise = Promise.reject(err);\r\n        }\r\n        // Get route's catch handler, if it exists\r\n        const catchHandler = route && route.catchHandler;\r\n        if (responsePromise instanceof Promise &&\r\n            (this._catchHandler || catchHandler)) {\r\n            responsePromise = responsePromise.catch(async (err) => {\r\n                // If there's a route catch handler, process that first\r\n                if (catchHandler) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // Still include URL here as it will be async from the console group\r\n                        // and may not make sense without the URL\r\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\r\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\r\n                        logger.error(`Error thrown by:`, route);\r\n                        logger.error(err);\r\n                        logger.groupEnd();\r\n                    }\r\n                    try {\r\n                        return await catchHandler.handle({ url, request, event, params });\r\n                    }\r\n                    catch (catchErr) {\r\n                        if (catchErr instanceof Error) {\r\n                            err = catchErr;\r\n                        }\r\n                    }\r\n                }\r\n                if (this._catchHandler) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // Still include URL here as it will be async from the console group\r\n                        // and may not make sense without the URL\r\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\r\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\r\n                        logger.error(`Error thrown by:`, route);\r\n                        logger.error(err);\r\n                        logger.groupEnd();\r\n                    }\r\n                    return this._catchHandler.handle({ url, request, event });\r\n                }\r\n                throw err;\r\n            });\r\n        }\r\n        return responsePromise;\r\n    }\r\n    /**\r\n     * Checks a request and URL (and optionally an event) against the list of\r\n     * registered routes, and if there's a match, returns the corresponding\r\n     * route along with any params generated by the match.\r\n     *\r\n     * @param {Object} options\r\n     * @param {URL} options.url\r\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\r\n     *     against the current origin.\r\n     * @param {Request} options.request The request to match.\r\n     * @param {Event} options.event The corresponding event.\r\n     * @return {Object} An object with `route` and `params` properties.\r\n     *     They are populated if a matching route was found or `undefined`\r\n     *     otherwise.\r\n     */\r\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\r\n        const routes = this._routes.get(request.method) || [];\r\n        for (const route of routes) {\r\n            let params;\r\n            // route.match returns type any, not possible to change right now.\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            const matchResult = route.match({ url, sameOrigin, request, event });\r\n            if (matchResult) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    // Warn developers that using an async matchCallback is almost always\r\n                    // not the right thing to do.\r\n                    if (matchResult instanceof Promise) {\r\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\r\n                            `matchCallback function was used. Please convert the ` +\r\n                            `following route to use a synchronous matchCallback function:`, route);\r\n                    }\r\n                }\r\n                // See https://github.com/GoogleChrome/workbox/issues/2079\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                params = matchResult;\r\n                if (Array.isArray(params) && params.length === 0) {\r\n                    // Instead of passing an empty array in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if (matchResult.constructor === Object && // eslint-disable-line\r\n                    Object.keys(matchResult).length === 0) {\r\n                    // Instead of passing an empty object in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if (typeof matchResult === 'boolean') {\r\n                    // For the boolean value true (rather than just something truth-y),\r\n                    // don't set params.\r\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\r\n                    params = undefined;\r\n                }\r\n                // Return early if have a match.\r\n                return { route, params };\r\n            }\r\n        }\r\n        // If no match was found above, return and empty object.\r\n        return {};\r\n    }\r\n    /**\r\n     * Define a default `handler` that's called when no routes explicitly\r\n     * match the incoming request.\r\n     *\r\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\r\n     *\r\n     * Without a default handler, unmatched requests will go against the\r\n     * network as if there were no service worker present.\r\n     *\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to associate with this\r\n     * default handler. Each method has its own default.\r\n     */\r\n    setDefaultHandler(handler, method = defaultMethod) {\r\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\r\n    }\r\n    /**\r\n     * If a Route throws an error while handling a request, this `handler`\r\n     * will be called and given a chance to provide a response.\r\n     *\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     */\r\n    setCatchHandler(handler) {\r\n        this._catchHandler = normalizeHandler(handler);\r\n    }\r\n    /**\r\n     * Registers a route with the router.\r\n     *\r\n     * @param {workbox-routing.Route} route The route to register.\r\n     */\r\n    registerRoute(route) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(route, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route, 'match', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.isType(route.handler, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route.handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.handler',\r\n            });\r\n            assert.isType(route.method, 'string', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.method',\r\n            });\r\n        }\r\n        if (!this._routes.has(route.method)) {\r\n            this._routes.set(route.method, []);\r\n        }\r\n        // Give precedence to all of the earlier routes by adding this additional\r\n        // route to the end of the array.\r\n        this._routes.get(route.method).push(route);\r\n    }\r\n    /**\r\n     * Unregisters a route with the router.\r\n     *\r\n     * @param {workbox-routing.Route} route The route to unregister.\r\n     */\r\n    unregisterRoute(route) {\r\n        if (!this._routes.has(route.method)) {\r\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\r\n                method: route.method,\r\n            });\r\n        }\r\n        const routeIndex = this._routes.get(route.method).indexOf(route);\r\n        if (routeIndex > -1) {\r\n            this._routes.get(route.method).splice(routeIndex, 1);\r\n        }\r\n        else {\r\n            throw new WorkboxError('unregister-route-route-not-registered');\r\n        }\r\n    }\r\n}\r\nexport { Router };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { Router } from '../Router.js';\r\nimport '../_version.js';\r\nlet defaultRouter;\r\n/**\r\n * Creates a new, singleton Router instance if one does not exist. If one\r\n * does already exist, that instance is returned.\r\n *\r\n * @private\r\n * @return {Router}\r\n */\r\nexport const getOrCreateDefaultRouter = () => {\r\n    if (!defaultRouter) {\r\n        defaultRouter = new Router();\r\n        // The helpers that use the default Router assume these listeners exist.\r\n        defaultRouter.addFetchListener();\r\n        defaultRouter.addCacheListener();\r\n    }\r\n    return defaultRouter;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Route } from './Route.js';\r\nimport { RegExpRoute } from './RegExpRoute.js';\r\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\r\nimport './_version.js';\r\n/**\r\n * Easily register a RegExp, string, or function with a caching\r\n * strategy to a singleton Router instance.\r\n *\r\n * This method will generate a Route for you if needed and\r\n * call {@link workbox-routing.Router#registerRoute}.\r\n *\r\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\r\n * If the capture param is a `Route`, all other arguments will be ignored.\r\n * @param {workbox-routing~handlerCallback} [handler] A callback\r\n * function that returns a Promise resulting in a Response. This parameter\r\n * is required if `capture` is not a `Route` object.\r\n * @param {string} [method='GET'] The HTTP method to match the Route\r\n * against.\r\n * @return {workbox-routing.Route} The generated `Route`.\r\n *\r\n * @memberof workbox-routing\r\n */\r\nfunction registerRoute(capture, handler, method) {\r\n    let route;\r\n    if (typeof capture === 'string') {\r\n        const captureUrl = new URL(capture, location.href);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\r\n                throw new WorkboxError('invalid-string', {\r\n                    moduleName: 'workbox-routing',\r\n                    funcName: 'registerRoute',\r\n                    paramName: 'capture',\r\n                });\r\n            }\r\n            // We want to check if Express-style wildcards are in the pathname only.\r\n            // TODO: Remove this log message in v4.\r\n            const valueToCheck = capture.startsWith('http')\r\n                ? captureUrl.pathname\r\n                : capture;\r\n            // See https://github.com/pillarjs/path-to-regexp#parameters\r\n            const wildcards = '[*:?+]';\r\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\r\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\r\n                    `character (${wildcards}). Strings are now always interpreted as ` +\r\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\r\n            }\r\n        }\r\n        const matchCallback = ({ url }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (url.pathname === captureUrl.pathname &&\r\n                    url.origin !== captureUrl.origin) {\r\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\r\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\r\n                        `if they match the entire URL.`);\r\n                }\r\n            }\r\n            return url.href === captureUrl.href;\r\n        };\r\n        // If `capture` is a string then `handler` and `method` must be present.\r\n        route = new Route(matchCallback, handler, method);\r\n    }\r\n    else if (capture instanceof RegExp) {\r\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\r\n        route = new RegExpRoute(capture, handler, method);\r\n    }\r\n    else if (typeof capture === 'function') {\r\n        // If `capture` is a function then `handler` and `method` must be present.\r\n        route = new Route(capture, handler, method);\r\n    }\r\n    else if (capture instanceof Route) {\r\n        route = capture;\r\n    }\r\n    else {\r\n        throw new WorkboxError('unsupported-route-type', {\r\n            moduleName: 'workbox-routing',\r\n            funcName: 'registerRoute',\r\n            paramName: 'capture',\r\n        });\r\n    }\r\n    const defaultRouter = getOrCreateDefaultRouter();\r\n    defaultRouter.registerRoute(route);\r\n    return route;\r\n}\r\nexport { registerRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A helper function that prevents a promise from being flagged as unused.\r\n *\r\n * @private\r\n **/\r\nexport function dontWaitFor(promise) {\r\n    // Effective no-op.\r\n    void promise.then(() => { });\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\n// Can't change Function type right now.\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\r\n\r\nlet idbProxyableTypes;\r\nlet cursorAdvanceMethods;\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getIdbProxyableTypes() {\r\n    return (idbProxyableTypes ||\r\n        (idbProxyableTypes = [\r\n            IDBDatabase,\r\n            IDBObjectStore,\r\n            IDBIndex,\r\n            IDBCursor,\r\n            IDBTransaction,\r\n        ]));\r\n}\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getCursorAdvanceMethods() {\r\n    return (cursorAdvanceMethods ||\r\n        (cursorAdvanceMethods = [\r\n            IDBCursor.prototype.advance,\r\n            IDBCursor.prototype.continue,\r\n            IDBCursor.prototype.continuePrimaryKey,\r\n        ]));\r\n}\r\nconst cursorRequestMap = new WeakMap();\r\nconst transactionDoneMap = new WeakMap();\r\nconst transactionStoreNamesMap = new WeakMap();\r\nconst transformCache = new WeakMap();\r\nconst reverseTransformCache = new WeakMap();\r\nfunction promisifyRequest(request) {\r\n    const promise = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            request.removeEventListener('success', success);\r\n            request.removeEventListener('error', error);\r\n        };\r\n        const success = () => {\r\n            resolve(wrap(request.result));\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(request.error);\r\n            unlisten();\r\n        };\r\n        request.addEventListener('success', success);\r\n        request.addEventListener('error', error);\r\n    });\r\n    promise\r\n        .then((value) => {\r\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\r\n        // (see wrapFunction).\r\n        if (value instanceof IDBCursor) {\r\n            cursorRequestMap.set(value, request);\r\n        }\r\n        // Catching to avoid \"Uncaught Promise exceptions\"\r\n    })\r\n        .catch(() => { });\r\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\r\n    // is because we create many promises from a single IDBRequest.\r\n    reverseTransformCache.set(promise, request);\r\n    return promise;\r\n}\r\nfunction cacheDonePromiseForTransaction(tx) {\r\n    // Early bail if we've already created a done promise for this transaction.\r\n    if (transactionDoneMap.has(tx))\r\n        return;\r\n    const done = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            tx.removeEventListener('complete', complete);\r\n            tx.removeEventListener('error', error);\r\n            tx.removeEventListener('abort', error);\r\n        };\r\n        const complete = () => {\r\n            resolve();\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\r\n            unlisten();\r\n        };\r\n        tx.addEventListener('complete', complete);\r\n        tx.addEventListener('error', error);\r\n        tx.addEventListener('abort', error);\r\n    });\r\n    // Cache it for later retrieval.\r\n    transactionDoneMap.set(tx, done);\r\n}\r\nlet idbProxyTraps = {\r\n    get(target, prop, receiver) {\r\n        if (target instanceof IDBTransaction) {\r\n            // Special handling for transaction.done.\r\n            if (prop === 'done')\r\n                return transactionDoneMap.get(target);\r\n            // Polyfill for objectStoreNames because of Edge.\r\n            if (prop === 'objectStoreNames') {\r\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\r\n            }\r\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\r\n            if (prop === 'store') {\r\n                return receiver.objectStoreNames[1]\r\n                    ? undefined\r\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\r\n            }\r\n        }\r\n        // Else transform whatever we get back.\r\n        return wrap(target[prop]);\r\n    },\r\n    set(target, prop, value) {\r\n        target[prop] = value;\r\n        return true;\r\n    },\r\n    has(target, prop) {\r\n        if (target instanceof IDBTransaction &&\r\n            (prop === 'done' || prop === 'store')) {\r\n            return true;\r\n        }\r\n        return prop in target;\r\n    },\r\n};\r\nfunction replaceTraps(callback) {\r\n    idbProxyTraps = callback(idbProxyTraps);\r\n}\r\nfunction wrapFunction(func) {\r\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\r\n    // only create one new func per func.\r\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\r\n    if (func === IDBDatabase.prototype.transaction &&\r\n        !('objectStoreNames' in IDBTransaction.prototype)) {\r\n        return function (storeNames, ...args) {\r\n            const tx = func.call(unwrap(this), storeNames, ...args);\r\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\r\n            return wrap(tx);\r\n        };\r\n    }\r\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\r\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\r\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\r\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\r\n    // undefined if the end of the cursor has been reached.\r\n    if (getCursorAdvanceMethods().includes(func)) {\r\n        return function (...args) {\r\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n            // the original object.\r\n            func.apply(unwrap(this), args);\r\n            return wrap(cursorRequestMap.get(this));\r\n        };\r\n    }\r\n    return function (...args) {\r\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n        // the original object.\r\n        return wrap(func.apply(unwrap(this), args));\r\n    };\r\n}\r\nfunction transformCachableValue(value) {\r\n    if (typeof value === 'function')\r\n        return wrapFunction(value);\r\n    // This doesn't return, it just creates a 'done' promise for the transaction,\r\n    // which is later returned for transaction.done (see idbObjectHandler).\r\n    if (value instanceof IDBTransaction)\r\n        cacheDonePromiseForTransaction(value);\r\n    if (instanceOfAny(value, getIdbProxyableTypes()))\r\n        return new Proxy(value, idbProxyTraps);\r\n    // Return the same value back if we're not going to transform it.\r\n    return value;\r\n}\r\nfunction wrap(value) {\r\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\r\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\r\n    if (value instanceof IDBRequest)\r\n        return promisifyRequest(value);\r\n    // If we've already transformed this value before, reuse the transformed value.\r\n    // This is faster, but it also provides object equality.\r\n    if (transformCache.has(value))\r\n        return transformCache.get(value);\r\n    const newValue = transformCachableValue(value);\r\n    // Not all types are transformed.\r\n    // These may be primitive types, so they can't be WeakMap keys.\r\n    if (newValue !== value) {\r\n        transformCache.set(value, newValue);\r\n        reverseTransformCache.set(newValue, value);\r\n    }\r\n    return newValue;\r\n}\r\nconst unwrap = (value) => reverseTransformCache.get(value);\r\n\r\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\r\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\r\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\r\n\r\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\r\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\r\n    const request = indexedDB.open(name, version);\r\n    const openPromise = wrap(request);\r\n    if (upgrade) {\r\n        request.addEventListener('upgradeneeded', (event) => {\r\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\r\n        });\r\n    }\r\n    if (blocked) {\r\n        request.addEventListener('blocked', (event) => blocked(\r\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\r\n        event.oldVersion, event.newVersion, event));\r\n    }\r\n    openPromise\r\n        .then((db) => {\r\n        if (terminated)\r\n            db.addEventListener('close', () => terminated());\r\n        if (blocking) {\r\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\r\n        }\r\n    })\r\n        .catch(() => { });\r\n    return openPromise;\r\n}\r\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\r\nfunction deleteDB(name, { blocked } = {}) {\r\n    const request = indexedDB.deleteDatabase(name);\r\n    if (blocked) {\r\n        request.addEventListener('blocked', (event) => blocked(\r\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\r\n        event.oldVersion, event));\r\n    }\r\n    return wrap(request).then(() => undefined);\r\n}\r\n\r\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\r\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\r\nconst cachedMethods = new Map();\r\nfunction getMethod(target, prop) {\r\n    if (!(target instanceof IDBDatabase &&\r\n        !(prop in target) &&\r\n        typeof prop === 'string')) {\r\n        return;\r\n    }\r\n    if (cachedMethods.get(prop))\r\n        return cachedMethods.get(prop);\r\n    const targetFuncName = prop.replace(/FromIndex$/, '');\r\n    const useIndex = prop !== targetFuncName;\r\n    const isWrite = writeMethods.includes(targetFuncName);\r\n    if (\r\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\r\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\r\n        !(isWrite || readMethods.includes(targetFuncName))) {\r\n        return;\r\n    }\r\n    const method = async function (storeName, ...args) {\r\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\r\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\r\n        let target = tx.store;\r\n        if (useIndex)\r\n            target = target.index(args.shift());\r\n        // Must reject if op rejects.\r\n        // If it's a write operation, must reject if tx.done rejects.\r\n        // Must reject with op rejection first.\r\n        // Must resolve with op value.\r\n        // Must handle both promises (no unhandled rejections)\r\n        return (await Promise.all([\r\n            target[targetFuncName](...args),\r\n            isWrite && tx.done,\r\n        ]))[0];\r\n    };\r\n    cachedMethods.set(prop, method);\r\n    return method;\r\n}\r\nreplaceTraps((oldTraps) => ({\r\n    ...oldTraps,\r\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\r\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\r\n}));\r\n\r\nexport { deleteDB, openDB };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:expiration:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { openDB, deleteDB } from 'idb';\r\nimport '../_version.js';\r\nconst DB_NAME = 'workbox-expiration';\r\nconst CACHE_OBJECT_STORE = 'cache-entries';\r\nconst normalizeURL = (unNormalizedUrl) => {\r\n    const url = new URL(unNormalizedUrl, location.href);\r\n    url.hash = '';\r\n    return url.href;\r\n};\r\n/**\r\n * Returns the timestamp model.\r\n *\r\n * @private\r\n */\r\nclass CacheTimestampsModel {\r\n    /**\r\n     *\r\n     * @param {string} cacheName\r\n     *\r\n     * @private\r\n     */\r\n    constructor(cacheName) {\r\n        this._db = null;\r\n        this._cacheName = cacheName;\r\n    }\r\n    /**\r\n     * Performs an upgrade of indexedDB.\r\n     *\r\n     * @param {IDBPDatabase<CacheDbSchema>} db\r\n     *\r\n     * @private\r\n     */\r\n    _upgradeDb(db) {\r\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\r\n        // have to use the `id` keyPath here and create our own values (a\r\n        // concatenation of `url + cacheName`) instead of simply using\r\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\r\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\r\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\r\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\r\n        // instead of doing both these indexes.\r\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\r\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n    }\r\n    /**\r\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\r\n     *\r\n     * @param {IDBPDatabase<CacheDbSchema>} db\r\n     *\r\n     * @private\r\n     */\r\n    _upgradeDbAndDeleteOldDbs(db) {\r\n        this._upgradeDb(db);\r\n        if (this._cacheName) {\r\n            void deleteDB(this._cacheName);\r\n        }\r\n    }\r\n    /**\r\n     * @param {string} url\r\n     * @param {number} timestamp\r\n     *\r\n     * @private\r\n     */\r\n    async setTimestamp(url, timestamp) {\r\n        url = normalizeURL(url);\r\n        const entry = {\r\n            url,\r\n            timestamp,\r\n            cacheName: this._cacheName,\r\n            // Creating an ID from the URL and cache name won't be necessary once\r\n            // Edge switches to Chromium and all browsers we support work with\r\n            // array keyPaths.\r\n            id: this._getId(url),\r\n        };\r\n        const db = await this.getDb();\r\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\r\n            durability: 'relaxed',\r\n        });\r\n        await tx.store.put(entry);\r\n        await tx.done;\r\n    }\r\n    /**\r\n     * Returns the timestamp stored for a given URL.\r\n     *\r\n     * @param {string} url\r\n     * @return {number | undefined}\r\n     *\r\n     * @private\r\n     */\r\n    async getTimestamp(url) {\r\n        const db = await this.getDb();\r\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\r\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\r\n    }\r\n    /**\r\n     * Iterates through all the entries in the object store (from newest to\r\n     * oldest) and removes entries once either `maxCount` is reached or the\r\n     * entry's timestamp is less than `minTimestamp`.\r\n     *\r\n     * @param {number} minTimestamp\r\n     * @param {number} maxCount\r\n     * @return {Array<string>}\r\n     *\r\n     * @private\r\n     */\r\n    async expireEntries(minTimestamp, maxCount) {\r\n        const db = await this.getDb();\r\n        let cursor = await db\r\n            .transaction(CACHE_OBJECT_STORE)\r\n            .store.index('timestamp')\r\n            .openCursor(null, 'prev');\r\n        const entriesToDelete = [];\r\n        let entriesNotDeletedCount = 0;\r\n        while (cursor) {\r\n            const result = cursor.value;\r\n            // TODO(philipwalton): once we can use a multi-key index, we\r\n            // won't have to check `cacheName` here.\r\n            if (result.cacheName === this._cacheName) {\r\n                // Delete an entry if it's older than the max age or\r\n                // if we already have the max number allowed.\r\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\r\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\r\n                    // TODO(philipwalton): we should be able to delete the\r\n                    // entry right here, but doing so causes an iteration\r\n                    // bug in Safari stable (fixed in TP). Instead we can\r\n                    // store the keys of the entries to delete, and then\r\n                    // delete the separate transactions.\r\n                    // https://github.com/GoogleChrome/workbox/issues/1978\r\n                    // cursor.delete();\r\n                    // We only need to return the URL, not the whole entry.\r\n                    entriesToDelete.push(cursor.value);\r\n                }\r\n                else {\r\n                    entriesNotDeletedCount++;\r\n                }\r\n            }\r\n            cursor = await cursor.continue();\r\n        }\r\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\r\n        // we should be able to remove this loop and do the entry deletion in the\r\n        // cursor loop above:\r\n        // https://github.com/GoogleChrome/workbox/issues/1978\r\n        const urlsDeleted = [];\r\n        for (const entry of entriesToDelete) {\r\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\r\n            urlsDeleted.push(entry.url);\r\n        }\r\n        return urlsDeleted;\r\n    }\r\n    /**\r\n     * Takes a URL and returns an ID that will be unique in the object store.\r\n     *\r\n     * @param {string} url\r\n     * @return {string}\r\n     *\r\n     * @private\r\n     */\r\n    _getId(url) {\r\n        // Creating an ID from the URL and cache name won't be necessary once\r\n        // Edge switches to Chromium and all browsers we support work with\r\n        // array keyPaths.\r\n        return this._cacheName + '|' + normalizeURL(url);\r\n    }\r\n    /**\r\n     * Returns an open connection to the database.\r\n     *\r\n     * @private\r\n     */\r\n    async getDb() {\r\n        if (!this._db) {\r\n            this._db = await openDB(DB_NAME, 1, {\r\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\r\n            });\r\n        }\r\n        return this._db;\r\n    }\r\n}\r\nexport { CacheTimestampsModel };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\r\nimport './_version.js';\r\n/**\r\n * The `CacheExpiration` class allows you define an expiration and / or\r\n * limit on the number of responses stored in a\r\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\r\n *\r\n * @memberof workbox-expiration\r\n */\r\nclass CacheExpiration {\r\n    /**\r\n     * To construct a new CacheExpiration instance you must provide at least\r\n     * one of the `config` properties.\r\n     *\r\n     * @param {string} cacheName Name of the cache to apply restrictions to.\r\n     * @param {Object} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\r\n     * that will be used when calling `delete()` on the cache.\r\n     */\r\n    constructor(cacheName, config = {}) {\r\n        this._isRunning = false;\r\n        this._rerunRequested = false;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(cacheName, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'constructor',\r\n                paramName: 'cacheName',\r\n            });\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n            }\r\n        }\r\n        this._maxEntries = config.maxEntries;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._matchOptions = config.matchOptions;\r\n        this._cacheName = cacheName;\r\n        this._timestampModel = new CacheTimestampsModel(cacheName);\r\n    }\r\n    /**\r\n     * Expires entries for the given cache and given criteria.\r\n     */\r\n    async expireEntries() {\r\n        if (this._isRunning) {\r\n            this._rerunRequested = true;\r\n            return;\r\n        }\r\n        this._isRunning = true;\r\n        const minTimestamp = this._maxAgeSeconds\r\n            ? Date.now() - this._maxAgeSeconds * 1000\r\n            : 0;\r\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\r\n        // Delete URLs from the cache\r\n        const cache = await self.caches.open(this._cacheName);\r\n        for (const url of urlsExpired) {\r\n            await cache.delete(url, this._matchOptions);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (urlsExpired.length > 0) {\r\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\r\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\r\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\r\n                    `'${this._cacheName}' cache.`);\r\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\r\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\r\n                logger.groupEnd();\r\n            }\r\n            else {\r\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\r\n            }\r\n        }\r\n        this._isRunning = false;\r\n        if (this._rerunRequested) {\r\n            this._rerunRequested = false;\r\n            dontWaitFor(this.expireEntries());\r\n        }\r\n    }\r\n    /**\r\n     * Update the timestamp for the given URL. This ensures the when\r\n     * removing entries based on maximum entries, most recently used\r\n     * is accurate or when expiring, the timestamp is up-to-date.\r\n     *\r\n     * @param {string} url\r\n     */\r\n    async updateTimestamp(url) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(url, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'updateTimestamp',\r\n                paramName: 'url',\r\n            });\r\n        }\r\n        await this._timestampModel.setTimestamp(url, Date.now());\r\n    }\r\n    /**\r\n     * Can be used to check if a URL has expired or not before it's used.\r\n     *\r\n     * This requires a look up from IndexedDB, so can be slow.\r\n     *\r\n     * Note: This method will not remove the cached entry, call\r\n     * `expireEntries()` to remove indexedDB and Cache entries.\r\n     *\r\n     * @param {string} url\r\n     * @return {boolean}\r\n     */\r\n    async isURLExpired(url) {\r\n        if (!this._maxAgeSeconds) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                throw new WorkboxError(`expired-test-without-max-age`, {\r\n                    methodName: 'isURLExpired',\r\n                    paramName: 'maxAgeSeconds',\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            const timestamp = await this._timestampModel.getTimestamp(url);\r\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\r\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\r\n        }\r\n    }\r\n    /**\r\n     * Removes the IndexedDB object store used to keep track of cache expiration\r\n     * metadata.\r\n     */\r\n    async delete() {\r\n        // Make sure we don't attempt another rerun if we're called in the middle of\r\n        // a cache expiration.\r\n        this._rerunRequested = false;\r\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\r\n    }\r\n}\r\nexport { CacheExpiration };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:cacheable-response:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport './_version.js';\r\n/**\r\n * This class allows you to set up rules determining what\r\n * status codes and/or headers need to be present in order for a\r\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\r\n * to be considered cacheable.\r\n *\r\n * @memberof workbox-cacheable-response\r\n */\r\nclass CacheableResponse {\r\n    /**\r\n     * To construct a new CacheableResponse instance you must provide at least\r\n     * one of the `config` properties.\r\n     *\r\n     * If both `statuses` and `headers` are specified, then both conditions must\r\n     * be met for the `Response` to be considered cacheable.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Array<number>} [config.statuses] One or more status codes that a\r\n     * `Response` can have and be considered cacheable.\r\n     * @param {Object<string,string>} [config.headers] A mapping of header names\r\n     * and expected values that a `Response` can have and be considered cacheable.\r\n     * If multiple headers are provided, only one needs to be present.\r\n     */\r\n    constructor(config = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(config.statuses || config.headers)) {\r\n                throw new WorkboxError('statuses-or-headers-required', {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.statuses) {\r\n                assert.isArray(config.statuses, {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.statuses',\r\n                });\r\n            }\r\n            if (config.headers) {\r\n                assert.isType(config.headers, 'object', {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.headers',\r\n                });\r\n            }\r\n        }\r\n        this._statuses = config.statuses;\r\n        this._headers = config.headers;\r\n    }\r\n    /**\r\n     * Checks a response to see whether it's cacheable or not, based on this\r\n     * object's configuration.\r\n     *\r\n     * @param {Response} response The response whose cacheability is being\r\n     * checked.\r\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\r\n     * otherwise.\r\n     */\r\n    isResponseCacheable(response) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(response, Response, {\r\n                moduleName: 'workbox-cacheable-response',\r\n                className: 'CacheableResponse',\r\n                funcName: 'isResponseCacheable',\r\n                paramName: 'response',\r\n            });\r\n        }\r\n        let cacheable = true;\r\n        if (this._statuses) {\r\n            cacheable = this._statuses.includes(response.status);\r\n        }\r\n        if (this._headers && cacheable) {\r\n            cacheable = Object.keys(this._headers).some((headerName) => {\r\n                return response.headers.get(headerName) === this._headers[headerName];\r\n            });\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!cacheable) {\r\n                logger.groupCollapsed(`The request for ` +\r\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\r\n                    `not meet the criteria for being cached.`);\r\n                logger.groupCollapsed(`View cacheability criteria here.`);\r\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\r\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\r\n                logger.groupEnd();\r\n                const logFriendlyHeaders = {};\r\n                response.headers.forEach((value, key) => {\r\n                    logFriendlyHeaders[key] = value;\r\n                });\r\n                logger.groupCollapsed(`View response status and headers here.`);\r\n                logger.log(`Response status: ${response.status}`);\r\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\r\n                logger.groupEnd();\r\n                logger.groupCollapsed(`View full response details here.`);\r\n                logger.log(response.headers);\r\n                logger.log(response);\r\n                logger.groupEnd();\r\n                logger.groupEnd();\r\n            }\r\n        }\r\n        return cacheable;\r\n    }\r\n}\r\nexport { CacheableResponse };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nfunction stripParams(fullURL, ignoreParams) {\r\n    const strippedURL = new URL(fullURL);\r\n    for (const param of ignoreParams) {\r\n        strippedURL.searchParams.delete(param);\r\n    }\r\n    return strippedURL.href;\r\n}\r\n/**\r\n * Matches an item in the cache, ignoring specific URL params. This is similar\r\n * to the `ignoreSearch` option, but it allows you to ignore just specific\r\n * params (while continuing to match on the others).\r\n *\r\n * @private\r\n * @param {Cache} cache\r\n * @param {Request} request\r\n * @param {Object} matchOptions\r\n * @param {Array<string>} ignoreParams\r\n * @return {Promise<Response|undefined>}\r\n */\r\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\r\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\r\n    // If the request doesn't include any ignored params, match as normal.\r\n    if (request.url === strippedRequestURL) {\r\n        return cache.match(request, matchOptions);\r\n    }\r\n    // Otherwise, match by comparing keys\r\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\r\n    const cacheKeys = await cache.keys(request, keysOptions);\r\n    for (const cacheKey of cacheKeys) {\r\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\r\n        if (strippedRequestURL === strippedCacheKeyURL) {\r\n            return cache.match(cacheKey, matchOptions);\r\n        }\r\n    }\r\n    return;\r\n}\r\nexport { cacheMatchIgnoreParams };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The Deferred class composes Promises in a way that allows for them to be\r\n * resolved or rejected from outside the constructor. In most cases promises\r\n * should be used directly, but Deferreds can be necessary when the logic to\r\n * resolve a promise must be separate.\r\n *\r\n * @private\r\n */\r\nclass Deferred {\r\n    /**\r\n     * Creates a promise and exposes its resolve and reject functions as methods.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}\r\nexport { Deferred };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:strategies:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\r\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\r\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { timeout } from 'workbox-core/_private/timeout.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport './_version.js';\r\nfunction toRequest(input) {\r\n    return typeof input === 'string' ? new Request(input) : input;\r\n}\r\n/**\r\n * A class created every time a Strategy instance instance calls\r\n * {@link workbox-strategies.Strategy~handle} or\r\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\r\n * cache actions around plugin callbacks and keeps track of when the strategy\r\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\r\n *\r\n * @memberof workbox-strategies\r\n */\r\nclass StrategyHandler {\r\n    /**\r\n     * Creates a new instance associated with the passed strategy and event\r\n     * that's handling the request.\r\n     *\r\n     * The constructor also initializes the state that will be passed to each of\r\n     * the plugins handling this request.\r\n     *\r\n     * @param {workbox-strategies.Strategy} strategy\r\n     * @param {Object} options\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {ExtendableEvent} options.event The event associated with the\r\n     *     request.\r\n     * @param {URL} [options.url]\r\n     * @param {*} [options.params] The return value from the\r\n     *     {@link workbox-routing~matchCallback} (if applicable).\r\n     */\r\n    constructor(strategy, options) {\r\n        this._cacheKeys = {};\r\n        /**\r\n         * The request the strategy is performing (passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * @name request\r\n         * @instance\r\n         * @type {Request}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * The event associated with this request.\r\n         * @name event\r\n         * @instance\r\n         * @type {ExtendableEvent}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * A `URL` instance of `request.url` (if passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * Note: the `url` param will be present if the strategy was invoked\r\n         * from a workbox `Route` object.\r\n         * @name url\r\n         * @instance\r\n         * @type {URL|undefined}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * A `param` value (if passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * Note: the `param` param will be present if the strategy was invoked\r\n         * from a workbox `Route` object and the\r\n         * {@link workbox-routing~matchCallback} returned\r\n         * a truthy value (it will be that value).\r\n         * @name params\r\n         * @instance\r\n         * @type {*|undefined}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(options.event, ExtendableEvent, {\r\n                moduleName: 'workbox-strategies',\r\n                className: 'StrategyHandler',\r\n                funcName: 'constructor',\r\n                paramName: 'options.event',\r\n            });\r\n        }\r\n        Object.assign(this, options);\r\n        this.event = options.event;\r\n        this._strategy = strategy;\r\n        this._handlerDeferred = new Deferred();\r\n        this._extendLifetimePromises = [];\r\n        // Copy the plugins list (since it's mutable on the strategy),\r\n        // so any mutations don't affect this handler instance.\r\n        this._plugins = [...strategy.plugins];\r\n        this._pluginStateMap = new Map();\r\n        for (const plugin of this._plugins) {\r\n            this._pluginStateMap.set(plugin, {});\r\n        }\r\n        this.event.waitUntil(this._handlerDeferred.promise);\r\n    }\r\n    /**\r\n     * Fetches a given request (and invokes any applicable plugin callback\r\n     * methods) using the `fetchOptions` (for non-navigation requests) and\r\n     * `plugins` defined on the `Strategy` object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - `requestWillFetch()`\r\n     * - `fetchDidSucceed()`\r\n     * - `fetchDidFail()`\r\n     *\r\n     * @param {Request|string} input The URL or request to fetch.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async fetch(input) {\r\n        const { event } = this;\r\n        let request = toRequest(input);\r\n        if (request.mode === 'navigate' &&\r\n            event instanceof FetchEvent &&\r\n            event.preloadResponse) {\r\n            const possiblePreloadResponse = (await event.preloadResponse);\r\n            if (possiblePreloadResponse) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.log(`Using a preloaded navigation response for ` +\r\n                        `'${getFriendlyURL(request.url)}'`);\r\n                }\r\n                return possiblePreloadResponse;\r\n            }\r\n        }\r\n        // If there is a fetchDidFail plugin, we need to save a clone of the\r\n        // original request before it's either modified by a requestWillFetch\r\n        // plugin or before the original request's body is consumed via fetch().\r\n        const originalRequest = this.hasCallback('fetchDidFail')\r\n            ? request.clone()\r\n            : null;\r\n        try {\r\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\r\n                request = await cb({ request: request.clone(), event });\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof Error) {\r\n                throw new WorkboxError('plugin-error-request-will-fetch', {\r\n                    thrownErrorMessage: err.message,\r\n                });\r\n            }\r\n        }\r\n        // The request can be altered by plugins with `requestWillFetch` making\r\n        // the original request (most likely from a `fetch` event) different\r\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\r\n        const pluginFilteredRequest = request.clone();\r\n        try {\r\n            let fetchResponse;\r\n            // See https://github.com/GoogleChrome/workbox/issues/1796\r\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Network request for ` +\r\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\r\n                    `status '${fetchResponse.status}'.`);\r\n            }\r\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\r\n                fetchResponse = await callback({\r\n                    event,\r\n                    request: pluginFilteredRequest,\r\n                    response: fetchResponse,\r\n                });\r\n            }\r\n            return fetchResponse;\r\n        }\r\n        catch (error) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`Network request for ` +\r\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\r\n            }\r\n            // `originalRequest` will only exist if a `fetchDidFail` callback\r\n            // is being used (see above).\r\n            if (originalRequest) {\r\n                await this.runCallbacks('fetchDidFail', {\r\n                    error: error,\r\n                    event,\r\n                    originalRequest: originalRequest.clone(),\r\n                    request: pluginFilteredRequest.clone(),\r\n                });\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\r\n     * the response generated by `this.fetch()`.\r\n     *\r\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\r\n     * so you do not have to manually call `waitUntil()` on the event.\r\n     *\r\n     * @param {Request|string} input The request or URL to fetch and cache.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async fetchAndCachePut(input) {\r\n        const response = await this.fetch(input);\r\n        const responseClone = response.clone();\r\n        void this.waitUntil(this.cachePut(input, responseClone));\r\n        return response;\r\n    }\r\n    /**\r\n     * Matches a request from the cache (and invokes any applicable plugin\r\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\r\n     * defined on the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillBeUsed()\r\n     * - cachedResponseWillBeUsed()\r\n     *\r\n     * @param {Request|string} key The Request or URL to use as the cache key.\r\n     * @return {Promise<Response|undefined>} A matching response, if found.\r\n     */\r\n    async cacheMatch(key) {\r\n        const request = toRequest(key);\r\n        let cachedResponse;\r\n        const { cacheName, matchOptions } = this._strategy;\r\n        const effectiveRequest = await this.getCacheKey(request, 'read');\r\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\r\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (cachedResponse) {\r\n                logger.debug(`Found a cached response in '${cacheName}'.`);\r\n            }\r\n            else {\r\n                logger.debug(`No cached response found in '${cacheName}'.`);\r\n            }\r\n        }\r\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\r\n            cachedResponse =\r\n                (await callback({\r\n                    cacheName,\r\n                    matchOptions,\r\n                    cachedResponse,\r\n                    request: effectiveRequest,\r\n                    event: this.event,\r\n                })) || undefined;\r\n        }\r\n        return cachedResponse;\r\n    }\r\n    /**\r\n     * Puts a request/response pair in the cache (and invokes any applicable\r\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\r\n     * the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillBeUsed()\r\n     * - cacheWillUpdate()\r\n     * - cacheDidUpdate()\r\n     *\r\n     * @param {Request|string} key The request or URL to use as the cache key.\r\n     * @param {Response} response The response to cache.\r\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\r\n     * not be cached, and `true` otherwise.\r\n     */\r\n    async cachePut(key, response) {\r\n        const request = toRequest(key);\r\n        // Run in the next task to avoid blocking other cache reads.\r\n        // https://github.com/w3c/ServiceWorker/issues/1397\r\n        await timeout(0);\r\n        const effectiveRequest = await this.getCacheKey(request, 'write');\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\r\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\r\n                    url: getFriendlyURL(effectiveRequest.url),\r\n                    method: effectiveRequest.method,\r\n                });\r\n            }\r\n            // See https://github.com/GoogleChrome/workbox/issues/2818\r\n            const vary = response.headers.get('Vary');\r\n            if (vary) {\r\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\r\n                    `has a 'Vary: ${vary}' header. ` +\r\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\r\n                    `to ensure cache matching and deletion works as expected.`);\r\n            }\r\n        }\r\n        if (!response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.error(`Cannot cache non-existent response for ` +\r\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\r\n            }\r\n            throw new WorkboxError('cache-put-with-no-response', {\r\n                url: getFriendlyURL(effectiveRequest.url),\r\n            });\r\n        }\r\n        const responseToCache = await this._ensureResponseSafeToCache(response);\r\n        if (!responseToCache) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\r\n                    `will not be cached.`, responseToCache);\r\n            }\r\n            return false;\r\n        }\r\n        const { cacheName, matchOptions } = this._strategy;\r\n        const cache = await self.caches.open(cacheName);\r\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\r\n        const oldResponse = hasCacheUpdateCallback\r\n            ? await cacheMatchIgnoreParams(\r\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\r\n            // feature. Consider into ways to only add this behavior if using\r\n            // precaching.\r\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\r\n            : null;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\r\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\r\n        }\r\n        try {\r\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof Error) {\r\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\r\n                if (error.name === 'QuotaExceededError') {\r\n                    await executeQuotaErrorCallbacks();\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\r\n            await callback({\r\n                cacheName,\r\n                oldResponse,\r\n                newResponse: responseToCache.clone(),\r\n                request: effectiveRequest,\r\n                event: this.event,\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\r\n     * executes any of those callbacks found in sequence. The final `Request`\r\n     * object returned by the last plugin is treated as the cache key for cache\r\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\r\n     * been registered, the passed request is returned unmodified\r\n     *\r\n     * @param {Request} request\r\n     * @param {string} mode\r\n     * @return {Promise<Request>}\r\n     */\r\n    async getCacheKey(request, mode) {\r\n        const key = `${request.url} | ${mode}`;\r\n        if (!this._cacheKeys[key]) {\r\n            let effectiveRequest = request;\r\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\r\n                effectiveRequest = toRequest(await callback({\r\n                    mode,\r\n                    request: effectiveRequest,\r\n                    event: this.event,\r\n                    // params has a type any can't change right now.\r\n                    params: this.params, // eslint-disable-line\r\n                }));\r\n            }\r\n            this._cacheKeys[key] = effectiveRequest;\r\n        }\r\n        return this._cacheKeys[key];\r\n    }\r\n    /**\r\n     * Returns true if the strategy has at least one plugin with the given\r\n     * callback.\r\n     *\r\n     * @param {string} name The name of the callback to check for.\r\n     * @return {boolean}\r\n     */\r\n    hasCallback(name) {\r\n        for (const plugin of this._strategy.plugins) {\r\n            if (name in plugin) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Runs all plugin callbacks matching the given name, in order, passing the\r\n     * given param object (merged ith the current plugin state) as the only\r\n     * argument.\r\n     *\r\n     * Note: since this method runs all plugins, it's not suitable for cases\r\n     * where the return value of a callback needs to be applied prior to calling\r\n     * the next callback. See\r\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\r\n     * below for how to handle that case.\r\n     *\r\n     * @param {string} name The name of the callback to run within each plugin.\r\n     * @param {Object} param The object to pass as the first (and only) param\r\n     *     when executing each callback. This object will be merged with the\r\n     *     current plugin state prior to callback execution.\r\n     */\r\n    async runCallbacks(name, param) {\r\n        for (const callback of this.iterateCallbacks(name)) {\r\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\r\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\r\n            await callback(param);\r\n        }\r\n    }\r\n    /**\r\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\r\n     * where each callback is wrapped with the current handler state (i.e. when\r\n     * you call each callback, whatever object parameter you pass it will\r\n     * be merged with the plugin's current state).\r\n     *\r\n     * @param {string} name The name fo the callback to run\r\n     * @return {Array<Function>}\r\n     */\r\n    *iterateCallbacks(name) {\r\n        for (const plugin of this._strategy.plugins) {\r\n            if (typeof plugin[name] === 'function') {\r\n                const state = this._pluginStateMap.get(plugin);\r\n                const statefulCallback = (param) => {\r\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\r\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\r\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\r\n                    return plugin[name](statefulParam);\r\n                };\r\n                yield statefulCallback;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Adds a promise to the\r\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\r\n     * of the event event associated with the request being handled (usually a\r\n     * `FetchEvent`).\r\n     *\r\n     * Note: you can await\r\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\r\n     * to know when all added promises have settled.\r\n     *\r\n     * @param {Promise} promise A promise to add to the extend lifetime promises\r\n     *     of the event that triggered the request.\r\n     */\r\n    waitUntil(promise) {\r\n        this._extendLifetimePromises.push(promise);\r\n        return promise;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves once all promises passed to\r\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\r\n     * have settled.\r\n     *\r\n     * Note: any work done after `doneWaiting()` settles should be manually\r\n     * passed to an event's `waitUntil()` method (not this handler's\r\n     * `waitUntil()` method), otherwise the service worker thread my be killed\r\n     * prior to your work completing.\r\n     */\r\n    async doneWaiting() {\r\n        let promise;\r\n        while ((promise = this._extendLifetimePromises.shift())) {\r\n            await promise;\r\n        }\r\n    }\r\n    /**\r\n     * Stops running the strategy and immediately resolves any pending\r\n     * `waitUntil()` promises.\r\n     */\r\n    destroy() {\r\n        this._handlerDeferred.resolve(null);\r\n    }\r\n    /**\r\n     * This method will call cacheWillUpdate on the available plugins (or use\r\n     * status === 200) to determine if the Response is safe and valid to cache.\r\n     *\r\n     * @param {Request} options.request\r\n     * @param {Response} options.response\r\n     * @return {Promise<Response|undefined>}\r\n     *\r\n     * @private\r\n     */\r\n    async _ensureResponseSafeToCache(response) {\r\n        let responseToCache = response;\r\n        let pluginsUsed = false;\r\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\r\n            responseToCache =\r\n                (await callback({\r\n                    request: this.request,\r\n                    response: responseToCache,\r\n                    event: this.event,\r\n                })) || undefined;\r\n            pluginsUsed = true;\r\n            if (!responseToCache) {\r\n                break;\r\n            }\r\n        }\r\n        if (!pluginsUsed) {\r\n            if (responseToCache && responseToCache.status !== 200) {\r\n                responseToCache = undefined;\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (responseToCache) {\r\n                    if (responseToCache.status !== 200) {\r\n                        if (responseToCache.status === 0) {\r\n                            logger.warn(`The response for '${this.request.url}' ` +\r\n                                `is an opaque response. The caching strategy that you're ` +\r\n                                `using will not cache opaque responses by default.`);\r\n                        }\r\n                        else {\r\n                            logger.debug(`The response for '${this.request.url}' ` +\r\n                                `returned a status code of '${response.status}' and won't ` +\r\n                                `be cached as a result.`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return responseToCache;\r\n    }\r\n}\r\nexport { StrategyHandler };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Returns a promise that resolves and the passed number of milliseconds.\r\n * This utility is an async/await-friendly version of `setTimeout`.\r\n *\r\n * @param {number} ms\r\n * @return {Promise}\r\n * @private\r\n */\r\nexport function timeout(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { StrategyHandler } from './StrategyHandler.js';\r\nimport './_version.js';\r\n/**\r\n * An abstract base class that all other strategy classes must extend from:\r\n *\r\n * @memberof workbox-strategies\r\n */\r\nclass Strategy {\r\n    /**\r\n     * Creates a new instance of the strategy and sets all documented option\r\n     * properties as public instance properties.\r\n     *\r\n     * Note: if a custom strategy class extends the base Strategy class and does\r\n     * not need more than these properties, it does not need to define its own\r\n     * constructor.\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to the cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] The\r\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\r\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n     */\r\n    constructor(options = {}) {\r\n        /**\r\n         * Cache name to store and retrieve\r\n         * requests. Defaults to the cache names provided by\r\n         * {@link workbox-core.cacheNames}.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\r\n        /**\r\n         * The list\r\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n         * used by this strategy.\r\n         *\r\n         * @type {Array<Object>}\r\n         */\r\n        this.plugins = options.plugins || [];\r\n        /**\r\n         * Values passed along to the\r\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\r\n         * of all fetch() requests made by this strategy.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.fetchOptions = options.fetchOptions;\r\n        /**\r\n         * The\r\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\r\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.matchOptions = options.matchOptions;\r\n    }\r\n    /**\r\n     * Perform a request strategy and returns a `Promise` that will resolve with\r\n     * a `Response`, invoking all relevant plugin callbacks.\r\n     *\r\n     * When a strategy instance is registered with a Workbox\r\n     * {@link workbox-routing.Route}, this method is automatically\r\n     * called when the route matches.\r\n     *\r\n     * Alternatively, this method can be used in a standalone `FetchEvent`\r\n     * listener by passing it to `event.respondWith()`.\r\n     *\r\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\r\n     *     properties listed below.\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {ExtendableEvent} options.event The event associated with the\r\n     *     request.\r\n     * @param {URL} [options.url]\r\n     * @param {*} [options.params]\r\n     */\r\n    handle(options) {\r\n        const [responseDone] = this.handleAll(options);\r\n        return responseDone;\r\n    }\r\n    /**\r\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\r\n     * instead of just returning a `Promise` that resolves to a `Response` it\r\n     * it will return an tuple of `[response, done]` promises, where the former\r\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\r\n     * Promise that will resolve once any promises that were added to\r\n     * `event.waitUntil()` as part of performing the strategy have completed.\r\n     *\r\n     * You can await the `done` promise to ensure any extra work performed by\r\n     * the strategy (usually caching responses) completes successfully.\r\n     *\r\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\r\n     *     properties listed below.\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {ExtendableEvent} options.event The event associated with the\r\n     *     request.\r\n     * @param {URL} [options.url]\r\n     * @param {*} [options.params]\r\n     * @return {Array<Promise>} A tuple of [response, done]\r\n     *     promises that can be used to determine when the response resolves as\r\n     *     well as when the handler has completed all its work.\r\n     */\r\n    handleAll(options) {\r\n        // Allow for flexible options to be passed.\r\n        if (options instanceof FetchEvent) {\r\n            options = {\r\n                event: options,\r\n                request: options.request,\r\n            };\r\n        }\r\n        const event = options.event;\r\n        const request = typeof options.request === 'string'\r\n            ? new Request(options.request)\r\n            : options.request;\r\n        const params = 'params' in options ? options.params : undefined;\r\n        const handler = new StrategyHandler(this, { event, request, params });\r\n        const responseDone = this._getResponse(handler, request, event);\r\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\r\n        // Return an array of promises, suitable for use with Promise.all().\r\n        return [responseDone, handlerDone];\r\n    }\r\n    async _getResponse(handler, request, event) {\r\n        await handler.runCallbacks('handlerWillStart', { event, request });\r\n        let response = undefined;\r\n        try {\r\n            response = await this._handle(request, handler);\r\n            // The \"official\" Strategy subclasses all throw this error automatically,\r\n            // but in case a third-party Strategy doesn't, ensure that we have a\r\n            // consistent failure when there's no response or an error response.\r\n            if (!response || response.type === 'error') {\r\n                throw new WorkboxError('no-response', { url: request.url });\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (error instanceof Error) {\r\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\r\n                    response = await callback({ error, event, request });\r\n                    if (response) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!response) {\r\n                throw error;\r\n            }\r\n            else if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\r\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\r\n                    `a handlerDidError plugin.`);\r\n            }\r\n        }\r\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\r\n            response = await callback({ event, request, response });\r\n        }\r\n        return response;\r\n    }\r\n    async _awaitComplete(responseDone, handler, request, event) {\r\n        let response;\r\n        let error;\r\n        try {\r\n            response = await responseDone;\r\n        }\r\n        catch (error) {\r\n            // Ignore errors, as response errors should be caught via the `response`\r\n            // promise above. The `done` promise will only throw for errors in\r\n            // promises passed to `handler.waitUntil()`.\r\n        }\r\n        try {\r\n            await handler.runCallbacks('handlerDidRespond', {\r\n                event,\r\n                request,\r\n                response,\r\n            });\r\n            await handler.doneWaiting();\r\n        }\r\n        catch (waitUntilError) {\r\n            if (waitUntilError instanceof Error) {\r\n                error = waitUntilError;\r\n            }\r\n        }\r\n        await handler.runCallbacks('handlerDidComplete', {\r\n            event,\r\n            request,\r\n            response,\r\n            error: error,\r\n        });\r\n        handler.destroy();\r\n        if (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexport { Strategy };\r\n/**\r\n * Classes extending the `Strategy` based class should implement this method,\r\n * and leverage the {@link workbox-strategies.StrategyHandler}\r\n * arg to perform all fetching and cache logic, which will ensure all relevant\r\n * cache, cache options, fetch options and plugins are used (per the current\r\n * strategy instance).\r\n *\r\n * @name _handle\r\n * @instance\r\n * @abstract\r\n * @function\r\n * @param {Request} request\r\n * @param {workbox-strategies.StrategyHandler} handler\r\n * @return {Promise<Response>}\r\n *\r\n * @memberof workbox-strategies.Strategy\r\n */\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const cacheOkAndOpaquePlugin = {\r\n    /**\r\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\r\n     * 0 (opaque).\r\n     *\r\n     * @param {Object} options\r\n     * @param {Response} options.response\r\n     * @return {Response|null}\r\n     *\r\n     * @private\r\n     */\r\n    cacheWillUpdate: async ({ response }) => {\r\n        if (response.status === 200 || response.status === 0) {\r\n            return response;\r\n        }\r\n        return null;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2020 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A utility method that makes it easier to use `event.waitUntil` with\r\n * async functions and return the result.\r\n *\r\n * @param {ExtendableEvent} event\r\n * @param {Function} asyncFn\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction waitUntil(event, asyncFn) {\r\n    const returnPromise = asyncFn();\r\n    event.waitUntil(returnPromise);\r\n    return returnPromise;\r\n}\r\nexport { waitUntil };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:precaching:7.2.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport '../_version.js';\r\n// Name of the search parameter used to store revision info.\r\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\r\n/**\r\n * Converts a manifest entry into a versioned URL suitable for precaching.\r\n *\r\n * @param {Object|string} entry\r\n * @return {string} A URL with versioning info.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function createCacheKey(entry) {\r\n    if (!entry) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If a precache manifest entry is a string, it's assumed to be a versioned\r\n    // URL, like '/app.abcd1234.js'. Return as-is.\r\n    if (typeof entry === 'string') {\r\n        const urlObject = new URL(entry, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    const { revision, url } = entry;\r\n    if (!url) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If there's just a URL and no revision, then it's also assumed to be a\r\n    // versioned URL.\r\n    if (!revision) {\r\n        const urlObject = new URL(url, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    // Otherwise, construct a properly versioned URL using the custom Workbox\r\n    // search parameter along with the revision info.\r\n    const cacheKeyURL = new URL(url, location.href);\r\n    const originalURL = new URL(url, location.href);\r\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\r\n    return {\r\n        cacheKey: cacheKeyURL.href,\r\n        url: originalURL.href,\r\n    };\r\n}\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A plugin, designed to be used with PrecacheController, to determine the\r\n * of assets that were updated (or not updated) during the install event.\r\n *\r\n * @private\r\n */\r\nclass PrecacheInstallReportPlugin {\r\n    constructor() {\r\n        this.updatedURLs = [];\r\n        this.notUpdatedURLs = [];\r\n        this.handlerWillStart = async ({ request, state, }) => {\r\n            // TODO: `state` should never be undefined...\r\n            if (state) {\r\n                state.originalRequest = request;\r\n            }\r\n        };\r\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\r\n            if (event.type === 'install') {\r\n                if (state &&\r\n                    state.originalRequest &&\r\n                    state.originalRequest instanceof Request) {\r\n                    // TODO: `state` should never be undefined...\r\n                    const url = state.originalRequest.url;\r\n                    if (cachedResponse) {\r\n                        this.notUpdatedURLs.push(url);\r\n                    }\r\n                    else {\r\n                        this.updatedURLs.push(url);\r\n                    }\r\n                }\r\n            }\r\n            return cachedResponse;\r\n        };\r\n    }\r\n}\r\nexport { PrecacheInstallReportPlugin };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A plugin, designed to be used with PrecacheController, to translate URLs into\r\n * the corresponding cache key, based on the current revision info.\r\n *\r\n * @private\r\n */\r\nclass PrecacheCacheKeyPlugin {\r\n    constructor({ precacheController }) {\r\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\r\n            // Params is type any, can't change right now.\r\n            /* eslint-disable */\r\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\r\n                this._precacheController.getCacheKeyForURL(request.url);\r\n            /* eslint-enable */\r\n            return cacheKey\r\n                ? new Request(cacheKey, { headers: request.headers })\r\n                : request;\r\n        };\r\n        this._precacheController = precacheController;\r\n    }\r\n}\r\nexport { PrecacheCacheKeyPlugin };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { PrecacheController } from '../PrecacheController.js';\r\nimport '../_version.js';\r\nlet precacheController;\r\n/**\r\n * @return {PrecacheController}\r\n * @private\r\n */\r\nexport const getOrCreatePrecacheController = () => {\r\n    if (!precacheController) {\r\n        precacheController = new PrecacheController();\r\n    }\r\n    return precacheController;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * This method is intentionally limited to same-origin responses, regardless of\r\n * whether CORS was used or not.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    let origin = null;\r\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\r\n    if (response.url) {\r\n        const responseURL = new URL(response.url);\r\n        origin = responseURL.origin;\r\n    }\r\n    if (origin !== self.location.origin) {\r\n        throw new WorkboxError('cross-origin-copy-response', { origin });\r\n    }\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream()\r\n        ? clonedResponse.body\r\n        : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from 'workbox-strategies/Strategy.js';\r\nimport './_version.js';\r\n/**\r\n * A {@link workbox-strategies.Strategy} implementation\r\n * specifically designed to work with\r\n * {@link workbox-precaching.PrecacheController}\r\n * to both cache and fetch precached assets.\r\n *\r\n * Note: an instance of this class is created automatically when creating a\r\n * `PrecacheController`; it's generally not necessary to create this yourself.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheStrategy extends Strategy {\r\n    /**\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to the cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\r\n     * of all fetch() requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] The\r\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\r\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n     * get the response from the network if there's a precache miss.\r\n     */\r\n    constructor(options = {}) {\r\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\r\n        super(options);\r\n        this._fallbackToNetwork =\r\n            options.fallbackToNetwork === false ? false : true;\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const response = await handler.cacheMatch(request);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        // If this is an `install` event for an entry that isn't already cached,\r\n        // then populate the cache.\r\n        if (handler.event && handler.event.type === 'install') {\r\n            return await this._handleInstall(request, handler);\r\n        }\r\n        // Getting here means something went wrong. An entry that should have been\r\n        // precached wasn't found in the cache.\r\n        return await this._handleFetch(request, handler);\r\n    }\r\n    async _handleFetch(request, handler) {\r\n        let response;\r\n        const params = (handler.params || {});\r\n        // Fall back to the network if we're configured to do so.\r\n        if (this._fallbackToNetwork) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\r\n                    `found. Falling back to the network.`);\r\n            }\r\n            const integrityInManifest = params.integrity;\r\n            const integrityInRequest = request.integrity;\r\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\r\n            // Do not add integrity if the original request is no-cors\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            response = await handler.fetch(new Request(request, {\r\n                integrity: request.mode !== 'no-cors'\r\n                    ? integrityInRequest || integrityInManifest\r\n                    : undefined,\r\n            }));\r\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\r\n            // that the response matches the precache manifest's expectations,\r\n            // and there's either a) no integrity property in the incoming request\r\n            // or b) there is an integrity, and it matches the precache manifest.\r\n            // See https://github.com/GoogleChrome/workbox/issues/2858\r\n            // Also if the original request users no-cors we don't use integrity.\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            if (integrityInManifest &&\r\n                noIntegrityConflict &&\r\n                request.mode !== 'no-cors') {\r\n                this._useDefaultCacheabilityPluginIfNeeded();\r\n                const wasCached = await handler.cachePut(request, response.clone());\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (wasCached) {\r\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\r\n                            `was used to \"repair\" the precache.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // This shouldn't normally happen, but there are edge cases:\r\n            // https://github.com/GoogleChrome/workbox/issues/1441\r\n            throw new WorkboxError('missing-precache-entry', {\r\n                cacheName: this.cacheName,\r\n                url: request.url,\r\n            });\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\r\n            // Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\r\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\r\n            logger.groupCollapsed(`View request details here.`);\r\n            logger.log(request);\r\n            logger.groupEnd();\r\n            logger.groupCollapsed(`View response details here.`);\r\n            logger.log(response);\r\n            logger.groupEnd();\r\n            logger.groupEnd();\r\n        }\r\n        return response;\r\n    }\r\n    async _handleInstall(request, handler) {\r\n        this._useDefaultCacheabilityPluginIfNeeded();\r\n        const response = await handler.fetch(request);\r\n        // Make sure we defer cachePut() until after we know the response\r\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\r\n        const wasCached = await handler.cachePut(request, response.clone());\r\n        if (!wasCached) {\r\n            // Throwing here will lead to the `install` handler failing, which\r\n            // we want to do if *any* of the responses aren't safe to cache.\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url: request.url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * This method is complex, as there a number of things to account for:\r\n     *\r\n     * The `plugins` array can be set at construction, and/or it might be added to\r\n     * to at any time before the strategy is used.\r\n     *\r\n     * At the time the strategy is used (i.e. during an `install` event), there\r\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\r\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\r\n     *\r\n     * - If this method is called and there are no suitable `cacheWillUpdate`\r\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\r\n     *\r\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\r\n     * we don't have to do anything (this might be a previously added\r\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\r\n     *\r\n     * - If this method is called and there is more than one `cacheWillUpdate`,\r\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\r\n     * we need to remove it. (This situation is unlikely, but it could happen if\r\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\r\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\r\n     *\r\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\r\n     *\r\n     * @private\r\n     */\r\n    _useDefaultCacheabilityPluginIfNeeded() {\r\n        let defaultPluginIndex = null;\r\n        let cacheWillUpdatePluginCount = 0;\r\n        for (const [index, plugin] of this.plugins.entries()) {\r\n            // Ignore the copy redirected plugin when determining what to do.\r\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\r\n                continue;\r\n            }\r\n            // Save the default plugin's index, in case it needs to be removed.\r\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\r\n                defaultPluginIndex = index;\r\n            }\r\n            if (plugin.cacheWillUpdate) {\r\n                cacheWillUpdatePluginCount++;\r\n            }\r\n        }\r\n        if (cacheWillUpdatePluginCount === 0) {\r\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\r\n        }\r\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\r\n            // Only remove the default plugin; multiple custom plugins are allowed.\r\n            this.plugins.splice(defaultPluginIndex, 1);\r\n        }\r\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\r\n    }\r\n}\r\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        if (!response || response.status >= 400) {\r\n            return null;\r\n        }\r\n        return response;\r\n    },\r\n};\r\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        return response.redirected ? await copyResponse(response) : response;\r\n    },\r\n};\r\nexport { PrecacheStrategy };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\r\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\r\nimport './_version.js';\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] The cache to use for precaching.\r\n     * @param {string} [options.plugins] Plugins to use when precaching as well\r\n     * as responding to fetch events for precached assets.\r\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n     * get the response from the network if there's a precache miss.\r\n     */\r\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n        this._strategy = new PrecacheStrategy({\r\n            cacheName: cacheNames.getPrecacheName(cacheName),\r\n            plugins: [\r\n                ...plugins,\r\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\r\n            ],\r\n            fallbackToNetwork,\r\n        });\r\n        // Bind the install and activate methods to the instance.\r\n        this.install = this.install.bind(this);\r\n        this.activate = this.activate.bind(this);\r\n    }\r\n    /**\r\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\r\n     * used to cache assets and respond to fetch events.\r\n     */\r\n    get strategy() {\r\n        return this._strategy;\r\n    }\r\n    /**\r\n     * Adds items to the precache list, removing any duplicates and\r\n     * stores the files in the\r\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n     * worker installs.\r\n     *\r\n     * This method can be called multiple times.\r\n     *\r\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n     */\r\n    precache(entries) {\r\n        this.addToCacheList(entries);\r\n        if (!this._installAndActiveListenersAdded) {\r\n            self.addEventListener('install', this.install);\r\n            self.addEventListener('activate', this.activate);\r\n            this._installAndActiveListenersAdded = true;\r\n        }\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\r\n     *     Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.InstallResult>}\r\n     */\r\n    install(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const installReportPlugin = new PrecacheInstallReportPlugin();\r\n            this.strategy.plugins.push(installReportPlugin);\r\n            // Cache entries one at a time.\r\n            // See https://github.com/GoogleChrome/workbox/issues/2528\r\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\r\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n                const cacheMode = this._urlsToCacheModes.get(url);\r\n                const request = new Request(url, {\r\n                    integrity,\r\n                    cache: cacheMode,\r\n                    credentials: 'same-origin',\r\n                });\r\n                await Promise.all(this.strategy.handleAll({\r\n                    params: { cacheKey },\r\n                    request,\r\n                    event,\r\n                }));\r\n            }\r\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printInstallDetails(updatedURLs, notUpdatedURLs);\r\n            }\r\n            return { updatedURLs, notUpdatedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.CleanupResult>}\r\n     */\r\n    activate(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            const currentlyCachedRequests = await cache.keys();\r\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n            const deletedURLs = [];\r\n            for (const request of currentlyCachedRequests) {\r\n                if (!expectedCacheKeys.has(request.url)) {\r\n                    await cache.delete(request);\r\n                    deletedURLs.push(request.url);\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printCleanupDetails(deletedURLs);\r\n            }\r\n            return { deletedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * @param {string} url A cache key whose SRI you want to look up.\r\n     * @return {string} The subresource integrity associated with the cache key,\r\n     * or undefined if it's not set.\r\n     */\r\n    getIntegrityForCacheKey(cacheKey) {\r\n        return this._cacheKeysToIntegrities.get(cacheKey);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for\r\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @return {workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        return (options) => {\r\n            options.request = new Request(url);\r\n            options.params = Object.assign({ cacheKey }, options.params);\r\n            return this.strategy.handle(options);\r\n        };\r\n    }\r\n}\r\nexport { PrecacheController };\r\n","/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { Route } from 'workbox-routing/Route.js';\r\nimport { generateURLVariations } from './utils/generateURLVariations.js';\r\nimport './_version.js';\r\n/**\r\n * A subclass of {@link workbox-routing.Route} that takes a\r\n * {@link workbox-precaching.PrecacheController}\r\n * instance and uses it to match incoming requests and handle fetching\r\n * responses from the precache.\r\n *\r\n * @memberof workbox-precaching\r\n * @extends workbox-routing.Route\r\n */\r\nclass PrecacheRoute extends Route {\r\n    /**\r\n     * @param {PrecacheController} precacheController A `PrecacheController`\r\n     * instance used to both match requests and respond to fetch events.\r\n     * @param {Object} [options] Options to control how requests are matched\r\n     * against the list of precached URLs.\r\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n     * appending the `directoryIndex` value.\r\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\r\n     * array of regex's to remove search params when looking for a cache match.\r\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n     * check the cache for the URL with a `.html` added to the end of the end.\r\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\r\n     * This is a function that should take a URL and return an array of\r\n     * alternative URLs that should be checked for precache matches.\r\n     */\r\n    constructor(precacheController, options) {\r\n        const match = ({ request, }) => {\r\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n            for (const possibleURL of generateURLVariations(request.url, options)) {\r\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\r\n                if (cacheKey) {\r\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\r\n                    return { cacheKey, integrity };\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\r\n            }\r\n            return;\r\n        };\r\n        super(match, precacheController.strategy);\r\n    }\r\n}\r\nexport { PrecacheRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\r\n * request strategy.\r\n *\r\n * A cache first strategy is useful for assets that have been revisioned,\r\n * such as URLs like `/styles/example.a8f5f1.css`, since they\r\n * can be cached for long periods of time.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass CacheFirst extends Strategy {\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'makeRequest',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        let response = await handler.cacheMatch(request);\r\n        let error = undefined;\r\n        if (!response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\r\n                    `Will respond with a network request.`);\r\n            }\r\n            try {\r\n                response = await handler.fetchAndCachePut(request);\r\n            }\r\n            catch (err) {\r\n                if (err instanceof Error) {\r\n                    error = err;\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (response) {\r\n                    logs.push(`Got response from network.`);\r\n                }\r\n                else {\r\n                    logs.push(`Unable to get a response from the network.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { CacheFirst };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { CacheableResponse, } from './CacheableResponse.js';\r\nimport './_version.js';\r\n/**\r\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\r\n * easier to add in cacheability checks to requests made via Workbox's built-in\r\n * strategies.\r\n *\r\n * @memberof workbox-cacheable-response\r\n */\r\nclass CacheableResponsePlugin {\r\n    /**\r\n     * To construct a new CacheableResponsePlugin instance you must provide at\r\n     * least one of the `config` properties.\r\n     *\r\n     * If both `statuses` and `headers` are specified, then both conditions must\r\n     * be met for the `Response` to be considered cacheable.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Array<number>} [config.statuses] One or more status codes that a\r\n     * `Response` can have and be considered cacheable.\r\n     * @param {Object<string,string>} [config.headers] A mapping of header names\r\n     * and expected values that a `Response` can have and be considered cacheable.\r\n     * If multiple headers are provided, only one needs to be present.\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * @param {Object} options\r\n         * @param {Response} options.response\r\n         * @return {Response|null}\r\n         * @private\r\n         */\r\n        this.cacheWillUpdate = async ({ response }) => {\r\n            if (this._cacheableResponse.isResponseCacheable(response)) {\r\n                return response;\r\n            }\r\n            return null;\r\n        };\r\n        this._cacheableResponse = new CacheableResponse(config);\r\n    }\r\n}\r\nexport { CacheableResponsePlugin };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheExpiration } from './CacheExpiration.js';\r\nimport './_version.js';\r\n/**\r\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\r\n * limit on the age and / or the number of cached requests.\r\n *\r\n * It can only be used with `workbox-strategy` instances that have a\r\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\r\n * In other words, it can't be used to expire entries in strategy that uses the\r\n * default runtime cache name.\r\n *\r\n * Whenever a cached response is used or updated, this plugin will look\r\n * at the associated cache and remove any old or extra responses.\r\n *\r\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\r\n * because the expiration clean up will not have occurred until *after* the\r\n * cached response has been used. If the response has a \"Date\" header, then\r\n * a light weight expiration check is performed and the response will not be\r\n * used immediately.\r\n *\r\n * When using `maxEntries`, the entry least-recently requested will be removed\r\n * from the cache first.\r\n *\r\n * @memberof workbox-expiration\r\n */\r\nclass ExpirationPlugin {\r\n    /**\r\n     * @param {ExpirationPluginOptions} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\r\n     * that will be used when calling `delete()` on the cache.\r\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\r\n     * automatic deletion if the available storage quota has been exceeded.\r\n     */\r\n    constructor(config = {}) {\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when a `Response` is about to be returned\r\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\r\n         * the handler. It allows the `Response` to be inspected for freshness and\r\n         * prevents it from being used if the `Response`'s `Date` header value is\r\n         * older than the configured `maxAgeSeconds`.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache the response is in.\r\n         * @param {Response} options.cachedResponse The `Response` object that's been\r\n         *     read from a cache and whose freshness should be checked.\r\n         * @return {Response} Either the `cachedResponse`, if it's\r\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\r\n         *\r\n         * @private\r\n         */\r\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\r\n            if (!cachedResponse) {\r\n                return null;\r\n            }\r\n            const isFresh = this._isResponseDateFresh(cachedResponse);\r\n            // Expire entries to ensure that even if the expiration date has\r\n            // expired, it'll only be used once.\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            dontWaitFor(cacheExpiration.expireEntries());\r\n            // Update the metadata for the request URL to the current timestamp,\r\n            // but don't `await` it as we don't want to block the response.\r\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\r\n            if (event) {\r\n                try {\r\n                    event.waitUntil(updateTimestampDone);\r\n                }\r\n                catch (error) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // The event may not be a fetch event; only log the URL if it is.\r\n                        if ('request' in event) {\r\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                                `updating cache entry for ` +\r\n                                `'${getFriendlyURL(event.request.url)}'.`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return isFresh ? cachedResponse : null;\r\n        };\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when an entry is added to a cache.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache that was updated.\r\n         * @param {string} options.request The Request for the cached entry.\r\n         *\r\n         * @private\r\n         */\r\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                assert.isType(cacheName, 'string', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'cacheName',\r\n                });\r\n                assert.isInstance(request, Request, {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'request',\r\n                });\r\n            }\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            await cacheExpiration.updateTimestamp(request.url);\r\n            await cacheExpiration.expireEntries();\r\n        };\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n            }\r\n        }\r\n        this._config = config;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._cacheExpirations = new Map();\r\n        if (config.purgeOnQuotaError) {\r\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\r\n        }\r\n    }\r\n    /**\r\n     * A simple helper method to return a CacheExpiration instance for a given\r\n     * cache name.\r\n     *\r\n     * @param {string} cacheName\r\n     * @return {CacheExpiration}\r\n     *\r\n     * @private\r\n     */\r\n    _getCacheExpiration(cacheName) {\r\n        if (cacheName === cacheNames.getRuntimeName()) {\r\n            throw new WorkboxError('expire-custom-caches-only');\r\n        }\r\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\r\n        if (!cacheExpiration) {\r\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\r\n            this._cacheExpirations.set(cacheName, cacheExpiration);\r\n        }\r\n        return cacheExpiration;\r\n    }\r\n    /**\r\n     * @param {Response} cachedResponse\r\n     * @return {boolean}\r\n     *\r\n     * @private\r\n     */\r\n    _isResponseDateFresh(cachedResponse) {\r\n        if (!this._maxAgeSeconds) {\r\n            // We aren't expiring by age, so return true, it's fresh\r\n            return true;\r\n        }\r\n        // Check if the 'date' header will suffice a quick expiration check.\r\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\r\n        // discussion.\r\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\r\n        if (dateHeaderTimestamp === null) {\r\n            // Unable to parse date, so assume it's fresh.\r\n            return true;\r\n        }\r\n        // If we have a valid headerTime, then our response is fresh iff the\r\n        // headerTime plus maxAgeSeconds is greater than the current time.\r\n        const now = Date.now();\r\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\r\n    }\r\n    /**\r\n     * This method will extract the data header and parse it into a useful\r\n     * value.\r\n     *\r\n     * @param {Response} cachedResponse\r\n     * @return {number|null}\r\n     *\r\n     * @private\r\n     */\r\n    _getDateHeaderTimestamp(cachedResponse) {\r\n        if (!cachedResponse.headers.has('date')) {\r\n            return null;\r\n        }\r\n        const dateHeader = cachedResponse.headers.get('date');\r\n        const parsedDate = new Date(dateHeader);\r\n        const headerTime = parsedDate.getTime();\r\n        // If the Date header was invalid for some reason, parsedDate.getTime()\r\n        // will return NaN.\r\n        if (isNaN(headerTime)) {\r\n            return null;\r\n        }\r\n        return headerTime;\r\n    }\r\n    /**\r\n     * This is a helper method that performs two operations:\r\n     *\r\n     * - Deletes *all* the underlying Cache instances associated with this plugin\r\n     * instance, by calling caches.delete() on your behalf.\r\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\r\n     * details for each Cache instance.\r\n     *\r\n     * When using cache expiration, calling this method is preferable to calling\r\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\r\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\r\n     *\r\n     * Note that if you're *not* using cache expiration for a given cache, calling\r\n     * `caches.delete()` and passing in the cache's name should be sufficient.\r\n     * There is no Workbox-specific method needed for cleanup in that case.\r\n     */\r\n    async deleteCacheAndMetadata() {\r\n        // Do this one at a time instead of all at once via `Promise.all()` to\r\n        // reduce the chance of inconsistency if a promise rejects.\r\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\r\n            await self.caches.delete(cacheName);\r\n            await cacheExpiration.delete();\r\n        }\r\n        // Reset this._cacheExpirations to its initial state.\r\n        this._cacheExpirations = new Map();\r\n    }\r\n}\r\nexport { ExpirationPlugin };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport { assert } from './_private/assert.js';\r\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\r\nimport './_version.js';\r\n/**\r\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\r\n * there's a quota error.\r\n *\r\n * @param {Function} callback\r\n * @memberof workbox-core\r\n */\r\n// Can't change Function type\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction registerQuotaErrorCallback(callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isType(callback, 'function', {\r\n            moduleName: 'workbox-core',\r\n            funcName: 'register',\r\n            paramName: 'callback',\r\n        });\r\n    }\r\n    quotaErrorCallbacks.add(callback);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Registered a callback to respond to quota errors.', callback);\r\n    }\r\n}\r\nexport { registerQuotaErrorCallback };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * NavigationRoute makes it easy to create a\r\n * {@link workbox-routing.Route} that matches for browser\r\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\r\n *\r\n * It will only match incoming Requests whose\r\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\r\n * is set to `navigate`.\r\n *\r\n * You can optionally only apply this route to a subset of navigation requests\r\n * by using one or both of the `denylist` and `allowlist` parameters.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\r\nclass NavigationRoute extends Route {\r\n    /**\r\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\r\n     * take precedence and the request will not match this route.\r\n     *\r\n     * The regular expressions in `allowlist` and `denylist`\r\n     * are matched against the concatenated\r\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\r\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\r\n     * portions of the requested URL.\r\n     *\r\n     * *Note*: These RegExps may be evaluated against every destination URL during\r\n     * a navigation. Avoid using\r\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\r\n     * or else your users may see delays when navigating your site.\r\n     *\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {Object} options\r\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\r\n     * the route will not handle the request (even if a allowlist RegExp matches).\r\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\r\n     * match the URL's pathname and search parameter, the route will handle the\r\n     * request (assuming the denylist doesn't match).\r\n     */\r\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArrayOfClass(allowlist, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'NavigationRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'options.allowlist',\r\n            });\r\n            assert.isArrayOfClass(denylist, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'NavigationRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'options.denylist',\r\n            });\r\n        }\r\n        super((options) => this._match(options), handler);\r\n        this._allowlist = allowlist;\r\n        this._denylist = denylist;\r\n    }\r\n    /**\r\n     * Routes match handler.\r\n     *\r\n     * @param {Object} options\r\n     * @param {URL} options.url\r\n     * @param {Request} options.request\r\n     * @return {boolean}\r\n     *\r\n     * @private\r\n     */\r\n    _match({ url, request }) {\r\n        if (request && request.mode !== 'navigate') {\r\n            return false;\r\n        }\r\n        const pathnameAndSearch = url.pathname + url.search;\r\n        for (const regExp of this._denylist) {\r\n            if (regExp.test(pathnameAndSearch)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\r\n                        `being used, since the URL matches this denylist pattern: ` +\r\n                        `${regExp.toString()}`);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\r\n            }\r\n            return true;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\r\n                `being used, since the URL being navigated to doesn't ` +\r\n                `match the allowlist.`);\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport { NavigationRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\r\n * request strategy.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\r\n * Opaque responses are are cross-origin requests where the response doesn't\r\n * support [CORS](https://enable-cors.org/).\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass NetworkFirst extends Strategy {\r\n    /**\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\r\n     * that fail to respond within the timeout will fallback to the cache.\r\n     *\r\n     * This option can be used to combat\r\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\r\n     * scenarios.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\r\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\r\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\r\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\r\n        }\r\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (this._networkTimeoutSeconds) {\r\n                assert.isType(this._networkTimeoutSeconds, 'number', {\r\n                    moduleName: 'workbox-strategies',\r\n                    className: this.constructor.name,\r\n                    funcName: 'constructor',\r\n                    paramName: 'networkTimeoutSeconds',\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'handle',\r\n                paramName: 'makeRequest',\r\n            });\r\n        }\r\n        const promises = [];\r\n        let timeoutId;\r\n        if (this._networkTimeoutSeconds) {\r\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\r\n            timeoutId = id;\r\n            promises.push(promise);\r\n        }\r\n        const networkPromise = this._getNetworkPromise({\r\n            timeoutId,\r\n            request,\r\n            logs,\r\n            handler,\r\n        });\r\n        promises.push(networkPromise);\r\n        const response = await handler.waitUntil((async () => {\r\n            // Promise.race() will resolve as soon as the first promise resolves.\r\n            return ((await handler.waitUntil(Promise.race(promises))) ||\r\n                // If Promise.race() resolved with null, it might be due to a network\r\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\r\n                // the networkPromise resolves instead of returning null.\r\n                // Note that it's fine to await an already-resolved promise, so we don't\r\n                // have to check to see if it's still \"in flight\".\r\n                (await networkPromise));\r\n        })());\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Request} options.request\r\n     * @param {Array} options.logs A reference to the logs array\r\n     * @param {Event} options.event\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    _getTimeoutPromise({ request, logs, handler, }) {\r\n        let timeoutId;\r\n        const timeoutPromise = new Promise((resolve) => {\r\n            const onNetworkTimeout = async () => {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logs.push(`Timing out the network response at ` +\r\n                        `${this._networkTimeoutSeconds} seconds.`);\r\n                }\r\n                resolve(await handler.cacheMatch(request));\r\n            };\r\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\r\n        });\r\n        return {\r\n            promise: timeoutPromise,\r\n            id: timeoutId,\r\n        };\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {number|undefined} options.timeoutId\r\n     * @param {Request} options.request\r\n     * @param {Array} options.logs A reference to the logs Array.\r\n     * @param {Event} options.event\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\r\n        let error;\r\n        let response;\r\n        try {\r\n            response = await handler.fetchAndCachePut(request);\r\n        }\r\n        catch (fetchError) {\r\n            if (fetchError instanceof Error) {\r\n                error = fetchError;\r\n            }\r\n        }\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (response) {\r\n                logs.push(`Got response from network.`);\r\n            }\r\n            else {\r\n                logs.push(`Unable to get a response from the network. Will respond ` +\r\n                    `with a cached response.`);\r\n            }\r\n        }\r\n        if (error || !response) {\r\n            response = await handler.cacheMatch(request);\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (response) {\r\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\r\n                }\r\n                else {\r\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\r\n                }\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { NetworkFirst };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\r\nimport './_version.js';\r\n/**\r\n * Adds an `activate` event listener which will clean up incompatible\r\n * precaches that were created by older versions of Workbox.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction cleanupOutdatedCaches() {\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('activate', ((event) => {\r\n        const cacheName = cacheNames.getPrecacheName();\r\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachesDeleted.length > 0) {\r\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\r\n                        `automatically:`, cachesDeleted);\r\n                }\r\n            }\r\n        }));\r\n    }));\r\n}\r\nexport { cleanupOutdatedCaches };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst SUBSTRING_TO_FIND = '-precache-';\r\n/**\r\n * Cleans up incompatible precaches that were created by older versions of\r\n * Workbox, by a service worker registered under the current scope.\r\n *\r\n * This is meant to be called as part of the `activate` event.\r\n *\r\n * This should be safe to use as long as you don't include `substringToFind`\r\n * (defaulting to `-precache-`) in your non-precache cache names.\r\n *\r\n * @param {string} currentPrecacheName The cache name currently in use for\r\n * precaching. This cache won't be deleted.\r\n * @param {string} [substringToFind='-precache-'] Cache names which include this\r\n * substring will be deleted (excluding `currentPrecacheName`).\r\n * @return {Array<string>} A list of all the cache names that were deleted.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\r\n    const cacheNames = await self.caches.keys();\r\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\r\n        return (cacheName.includes(substringToFind) &&\r\n            cacheName.includes(self.registration.scope) &&\r\n            cacheName !== currentPrecacheName);\r\n    });\r\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\r\n    return cacheNamesToDelete;\r\n};\r\nexport { deleteOutdatedCaches };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport './_version.js';\r\n/**\r\n * Claim any currently available clients once the service worker\r\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\r\n *\r\n * @memberof workbox-core\r\n */\r\nfunction clientsClaim() {\r\n    self.addEventListener('activate', () => self.clients.claim());\r\n}\r\nexport { clientsClaim };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandlerBoundToURL} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {string} url The precached URL which will be used to lookup the\r\n * `Response`.\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {workbox-routing~handlerCallback}\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction createHandlerBoundToURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.createHandlerBoundToURL(url);\r\n}\r\nexport { createHandlerBoundToURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * {@link workbox-precaching.precache} and\r\n * {@link workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See the\r\n * {@link workbox-precaching.PrecacheRoute} options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, options) {\r\n    precache(entries);\r\n    addRoute(options);\r\n}\r\nexport { precacheAndRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * {@link workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * {@link workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.precache(entries);\r\n}\r\nexport { precache };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { PrecacheRoute } from './PrecacheRoute.js';\r\nimport './_version.js';\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\r\n * options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const precacheRoute = new PrecacheRoute(precacheController, options);\r\n    registerRoute(precacheRoute);\r\n}\r\nexport { addRoute };\r\n"],"names":["self","_","e","messageGenerator","fallback","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","super","this","name","normalizeHandler","handler","handle","Route","match","method","setCatchHandler","catchHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","_defaultHandlerMap","routes","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","matchResult","Array","isArray","Object","keys","undefined","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","RegExp","moduleName","funcName","paramName","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","userCacheName","dontWaitFor","promise","quotaErrorCallbacks","Set","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","resolve","unlisten","removeEventListener","complete","error","DOMException","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","instanceOfAny","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","replace","useIndex","isWrite","storeName","store","shift","oldTraps","_extends","callback","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","hash","CacheTimestampsModel","_db","_cacheName","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","blocked","indexedDB","deleteDatabase","oldVersion","deleteDB","setTimestamp","timestamp","id","_getId","getDb","durability","put","getTimestamp","expireEntries","minTimestamp","maxCount","cursor","openCursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","delete","version","upgrade","blocking","terminated","open","openPromise","newVersion","openDB","bind","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_matchOptions","matchOptions","_timestampModel","Date","now","urlsExpired","cache","caches","updateTimestamp","isURLExpired","expireOlderThan","Infinity","CacheableResponse","_statuses","statuses","_headers","headers","isResponseCacheable","response","cacheable","status","headerName","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","Deferred","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","plugin","fetch","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetchOptions","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","key","cachedResponse","effectiveRequest","getCacheKey","multiMatchOptions","ms","setTimeout","String","responseToCache","_ensureResponseSafeToCache","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheKey","cacheMatchIgnoreParams","executeQuotaErrorCallbacks","newResponse","state","statefulCallback","statefulParam","doneWaiting","destroy","pluginsUsed","Strategy","responseDone","handleAll","_getResponse","_awaitComplete","_handle","waitUntilError","cacheOkAndOpaquePlugin","cacheWillUpdate","asyncFn","returnPromise","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","supportStatus","copyResponse","modifier","clonedResponse","responseInit","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","getOrCreatePrecacheController","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","_cacheableResponse","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","add","registerQuotaErrorCallback","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","getTime","isNaN","allowlist","denylist","_match","_allowlist","_denylist","pathnameAndSearch","search","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchError","clearTimeout","currentPrecacheName","substringToFind","cacheNamesToDelete","deleteOutdatedCaches","cachesDeleted","clients","claim","addRoute"],"mappings":"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"}